1. Diseño estructurado

La aplicación de este principio al desarrollo de programas permite seguir un enfoque de refinamientos sucesivos: 
en cada fase del diseño del programa ignoramos los detalles secundarios y nos centramos en lo que nos interesa en 
ese momento; en fases posteriores abordamos los detalles que hemos ignorado por el momento. 
De esta forma, al final tenemos un diseño completo, obtenido con menor esfuerzo y de forma más segura.

Ejemplo de uso de subprogramas:
  
   /////////////////////////////////////////////////////////////////////////////////////////  
   
  float obtener_nota();
  void imprimir_calificacion(float );
  int main(){
    float nota;
    nota = obtener_nota(); // llamada al subalgoritmo obtener_nota()
    imprimir_calificacion(nota); // llamada al subalgoritmo imprimir_calificacion(float)
    return 0;
  }
  
 float obtener_nota(){
     float a;
     do{
        cout << "Introduzca calificación:" << endl;
        cin >> a;
     }while(a<0.0 || a>10.0);
     return a;
 }
 
 float imprimir_calificacion(float c){
    if(c < 5.0){
      cout << "Suspenso." << endl;
    }else if(c < 7.0){
      cout << "Aprobado." << endl;
    }else if(c < 9.0){
      cout << "Notable." << endl;
    }else{
      cout << "Sobresaliente." << endl;
    }
 }
 
   ///////////////////////////////////////////////////////////////////////////////////////// 
 
 Al hacer una llamada a un subalgoritmo, el programa pasará a ejecutar dicha parte del código y después volverá por 
 donde iba.
 
 2. Tipos de parámetros
 
  Antes de diseñar nuestro subprograma tendremos que considerar dos cosas muy importantes:
    - ¿Qué información del programa principal (main) necesita conocer el subprograma para poder trabajar correctamente?
    - ¿Qué información producirá el subprograma llamado después de que se llame?
    
  Tipos de parámetros *muy importante tener claro*
  
  -> Por valor
    El valor del parámetro se copia en una variable del subprograma.
    Si el parámetro actual es una variable, esta no se modificará.
    Los parámetros reales pueden ser una variable, una constante o una expresión.
    Se usa más memoria.
    
  -> Por referencia
    El parámetro real sólo puede ser una variable.
    Si el parámetro formal se modifica, también se modifica la variable. (parametro actual).
    Se pasa la dirección de memoria de la variable.
    Se usa menos memoria.
  
 3. Funciones y procedimientos
 
 Podemos distinguir dos tipos de subprogramas según lo que devuelven:
 
 -> Procedimientos:
   Estos se utilizan para revolver un problema computacional general. Por ejemplo ordenador dos números,
   para rellenar o mostrar una tabla.
   Serán de tipo void (vacio), por lo tanto no devolveran nada.
   Un procedimiento constituye por sí solo una sentencia independiente que pueder ser utilizada en el cuerpo del otro 
   subprograma o en el principal. La única forma de intercambiar información es a través de los parámetros usados en la
   llamada.
   
   /////////////////////////////////////////////////////////////////////////////////////////
   
   void mostrarLista(int p[10]){
      for(int i = 0; i < 10; i++){
          cout << p[i] << endl;
      }
   }
   
   /////////////////////////////////////////////////////////////////////////////////////////
   
  
-> Funciones:
   Estos se utilizaran para realizar un cálculo computacional y generar un resultado único.
   El valor devuelto será del mismo tipo del que es la función.
   Una función no constituye por sí sola una sentencia, por lo que debe aparecer dentro de alguna sentencia que utilice el
   valor resultado de la función. La información se intercambia a través de los parámetros y mediante el valor devuelto por
   la función.

 
